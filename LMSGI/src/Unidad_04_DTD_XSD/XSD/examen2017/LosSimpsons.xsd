<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:element name="simpsons" type="tipoSimpsons"/>
	
	
	<xs:complexType name="tipoSimpsons">
		<xs:sequence>
			<xs:element name="localidad" type="tipoLocalidad"/>
			<xs:element name="pelicula" type="tipoPelicula"/>
			<xs:element name="creador" type="tipoCreador"/>
			<xs:element name="familia" type="tipoFamilia"/>
			<xs:element name="temporada" type="tipoTemporada"/>
			<xs:element name="personajes" type="tipoPersonajes"/>
			<xs:element name="colorPersonajes" type="tipoColorPersonajes"/>
		</xs:sequence>
	</xs:complexType>
	
	
	<!--  2. (0,5 puntos) Existe un elemento cuyo contenido es vacío.
		  4. (0,5 puntos) Existe un elemento con atributos de diferentes tipos primitivos (al menos uno de cadena de caracteres y otro de tipo numérico).
	 -->
	<xs:complexType name="tipoLocalidad">
		<xs:attribute name="valor" type="xs:string"/>
		<xs:attribute name="anyoFundacion" type="xs:integer"/>
	</xs:complexType>
	
	
	<!-- 3. (0,75 puntos) Existe un elemento con contenido mixto (texto y subelementos).
	-->
	<xs:complexType mixed="true" name="tipoPelicula">
		<xs:sequence>
			<xs:element name="titulo" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	
	
	<!-- 5. (0,5 puntos) Existe un elemento con atributos y contenido texto.
	Versión fácil, utilizando el atributo "mixed"
	 -->
	 <xs:complexType name="tipoCreador" mixed="true">
	 	<xs:attribute name="bso" type="xs:string"/>
	 </xs:complexType>
	 
	 <!-- 6. (1 punto) Existe un elemento con atributos y contenido de tipo numérico.
	  -->
	 <xs:complexType name="tipoFamilia">
		<xs:simpleContent>
			<xs:extension base="xs:integer">
				<xs:attribute name="nombre" type="xs:string" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	
	
	<!-- (0,5 puntos) Usas <xs:sequence>, <xs:choice> y <xs:all> de forma consciente, aprovechando las ventajas e inconvenientes de cada uno de estos elementos.
	En este caso usamos <xs:choice>
	 -->
	<xs:complexType name="tipoTemporada">
		<xs:choice>
			<xs:element name="temporada01" type="xs:string"/>
			<xs:element name="temporada02" type="xs:string"/>
			<xs:element name="temporada03" type="xs:string"/>
		</xs:choice>
	</xs:complexType>
	
	
	<!-- (0,5 puntos) Usas <xs:sequence>, <xs:choice> y <xs:all> de forma consciente, aprovechando las ventajas e inconvenientes de cada uno de estos elementos.
	En este caso usamos <xs:all>
	 -->
	<xs:complexType name="tipoPersonajes">
		<xs:all>
			<xs:element name="Homer" type="tipoVacio"/>
			<xs:element name="Marge" type="tipoVacio"/>
			<xs:element name="Bart" type="tipoVacio"/>
			<xs:element name="Lisa" type="tipoVacio"/>
			<xs:element name="Maggie" type="tipoVacio"/>
		</xs:all>
	</xs:complexType>
	
	<!-- Tipo vacío, necesario para el complexType anterior
	-->
	<xs:complexType name="tipoVacio"/>
	
	<!-- 8. (0,75 puntos) Existe un atributo que toma su valor de una lista de posibles valores.
	-->
	<xs:complexType name="tipoColorPersonajes">
		<xs:attribute name="principal">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="amarillo"/>
					<xs:enumeration value="rojo"/>
					<xs:enumeration value="negro"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="rojo" type="valorEntre100y1000"/>
		<xs:attribute name="verde" type="valorEntre100y1000"/>
		<xs:attribute name="azul" type="valorEntre100y1000"/>
	</xs:complexType>
	
	<!-- Tipo de valores numéricos entre 100 y 1000 para los
	atributos del complexType anterior
	 -->
	<xs:simpleType name="valorEntre100y1000">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="100"/>
			<xs:maxInclusive value="1000"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>